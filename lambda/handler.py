import os
import sys
import logging
import json
import grequests

# add path to included packages
path = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(path, 'lib/python2.7/site-packages'))

from utilities import util, geoprocessing, serializers, geo_utils, serializers

import fiona
import shapely


# set up logger
logger = logging.getLogger(__file__)
logger.setLevel(logging.DEBUG)
# commented out to avoid duplicate logs in lambda
# logger.addHandler(logging.StreamHandler())

def fire_analysis(event, context):

    geom = util.get_shapely_geom(event)
    tile_id = event['queryStringParameters']['tile_id']
    fire_type = event['queryStringParameters']['fire_type']

    date_list = geoprocessing.point_stats(geom, tile_id, fire_type) # looks like {'2016-05-09': 15, '2016-05-10': 200, '2016:-5-11': 52}

    # makes json formatted info of tile_id: date list
    print serializers.serialize_fire_analysis(date_list, tile_id)
    return serializers.serialize_fire_analysis(date_list, tile_id) # {'10N_010E': {'2016-05-09': 15, '2016-05-10': 200, '2016:-5-11': 52}}


def fire_alerts(event, context):

    geom = util.get_shapely_geom(event)
    area_ha = geo_utils.get_polygon_area(geom)

    payload = {'geojson': json.loads(event['body'])['geojson']}

    params = event.get('queryStringParameters')
    if not params:
        params = {}

    agg_by = params.get('aggregate_by')
    fire_type = params.get('fire_type')

    try:
        fire_type = clean_fire_type_input(fire_type)
    except ValueError, e:
        return serializers.api_error(e)

    # send list of tiles to another enpoint called fire_analysis(geom, tile)
    url = 'https://0yvx7602sb.execute-api.us-east-1.amazonaws.com/dev/fire_analysis'
    request_list = []

    # get list of tiles that intersect the aoi
    tiles = geoprocessing.find_tiles(geom)
    tiles = ['10N_110W', '10N_100W']
    # add specific analysis type for each request
    for tile in tiles:

        new_params = params.copy()
        new_params['tile_id'] = tile
        new_params['fire_type'] = fire_type

        request_list.append(grequests.post(url, json=payload, params=new_params))

    # execute these requests in parallel
    #response_list = grequests.map(request_list, size=len(tiles))
    response_list = [{"10N_110W": {"2016-06-06": 2, "2016-09-20": 3, "2016-01-05": 4, "2016-01-06": 2, "2016-01-07": 2, "2016-06-23": 5, "2016-01-02": 6, "2016-08-17": 1, "2016-01-08": 6, "2016-01-09": 90, "2016-03-08": 58, "2016-03-09": 23, "2016-03-06": 12, "2016-03-07": 51, "2016-03-04": 1, "2016-03-02": 5, "2016-07-03": 15, "2016-03-01": 2, "2016-01-19": 6, "2016-01-18": 18, "2016-01-13": 24, "2016-01-12": 21, "2016-01-11": 41, "2016-01-10": 107, "2016-01-17": 11, "2016-01-16": 43, "2016-01-15": 71, "2016-01-14": 7, "2016-02-23": 5, "2016-02-22": 48, "2016-02-21": 153, "2016-02-20": 94, "2016-03-19": 1, "2016-03-18": 2, "2016-02-25": 5, "2016-03-14": 9, "2016-03-17": 1, "2016-02-28": 6, "2016-03-11": 91, "2016-03-10": 35, "2016-03-13": 8, "2016-03-12": 64, "2016-08-31": 5, "2016-12-16": 4, "2016-03-20": 15, "2016-11-08": 12, "2016-03-22": 6, "2016-03-24": 5, "2016-03-29": 1, "2016-11-07": 3, "2016-02-26": 21, "2016-02-27": 17, "2016-08-29": 2, "2016-08-28": 1, "2016-08-25": 1, "2016-08-27": 1, "2016-08-26": 1, "2016-11-06": 1, "2016-08-23": 2, "2016-08-22": 4, "2016-05-26": 2, "2016-05-20": 3, "2016-11-13": 5, "2016-09-05": 5, "2016-04-30": 4, "2016-09-01": 11, "2016-09-03": 3, "2016-07-08": 1, "2016-11-17": 8, "2016-03-30": 1, "2016-11-15": 1, "2016-08-10": 6, "2016-08-11": 6, "2016-08-12": 1, "2016-08-13": 3, "2016-08-15": 1, "2016-07-10": 6, "2016-08-18": 2, "2016-04-29": 1, "2016-09-10": 1, "2016-09-16": 1, "2016-09-14": 1, "2016-04-21": 4, "2016-04-20": 8, "2016-04-23": 3, "2016-04-22": 3, "2016-04-25": 6, "2016-04-24": 1, "2016-04-26": 2, "2016-07-16": 3, "2016-10-19": 3, "2016-11-26": 3, "2016-05-08": 1, "2016-05-09": 1, "2016-08-05": 3, "2016-07-06": 1, "2016-07-07": 9, "2016-07-05": 3, "2016-05-01": 2, "2016-05-02": 4, "2016-05-04": 1, "2016-05-05": 10, "2016-05-06": 1, "2016-05-07": 6, "2016-04-18": 4, "2016-04-19": 6, "2016-04-11": 7, "2016-04-12": 2, "2016-04-13": 7, "2016-06-16": 2, "2016-06-17": 4, "2016-06-10": 3, "2016-07-11": 5, "2016-07-02": 2, "2016-07-13": 2, "2016-07-12": 17, "2016-07-14": 5, "2016-05-18": 2, "2016-07-19": 5, "2016-05-16": 3, "2016-05-14": 1, "2016-05-13": 1, "2016-05-11": 3, "2016-05-10": 1, "2016-04-03": 5, "2016-04-07": 24, "2016-04-06": 1, "2016-04-05": 8, "2016-04-04": 7, "2016-09-06": 6, "2016-04-09": 30, "2016-04-08": 8, "2016-01-26": 13, "2016-01-27": 43, "2016-01-25": 1, "2016-01-28": 74, "2016-01-29": 30, "2016-06-03": 6, "2016-02-18": 8, "2016-02-19": 6, "2016-02-12": 2, "2016-02-13": 1, "2016-02-10": 34, "2016-02-11": 2, "2016-02-16": 14, "2016-02-17": 4, "2016-02-14": 45, "2016-02-15": 55, "2016-07-24": 3, "2016-07-25": 3, "2016-07-27": 4, "2016-07-21": 4, "2016-10-09": 1, "2016-08-09": 2, "2016-06-08": 1, "2016-01-31": 94, "2016-01-30": 136, "2016-09-28": 1, "2016-02-09": 7, "2016-02-08": 14, "2016-02-01": 40, "2016-02-03": 10, "2016-02-02": 68, "2016-02-05": 47, "2016-06-07": 2, "2016-02-07": 25, "2016-02-06": 9}}, {"10N_100W": {"2016-06-06": 2, "2016-09-20": 3, "2016-01-05": 4, "2016-01-06": 2, "2016-01-07": 2, "2016-06-23": 5, "2016-01-02": 6, "2016-08-17": 1, "2016-01-08": 6, "2016-01-09": 90, "2016-03-08": 58, "2016-03-09": 23, "2016-03-06": 12, "2016-03-07": 51, "2016-03-04": 1, "2016-03-02": 5, "2016-07-03": 15, "2016-03-01": 2, "2016-01-19": 6, "2016-01-18": 18, "2016-01-13": 24, "2016-01-12": 21, "2016-01-11": 41, "2016-01-10": 107, "2016-01-17": 11, "2016-01-16": 43, "2016-01-15": 71, "2016-01-14": 7, "2016-02-23": 5, "2016-02-22": 48, "2016-02-21": 153, "2016-02-20": 94, "2016-03-19": 1, "2016-03-18": 2, "2016-02-25": 5, "2016-03-14": 9, "2016-03-17": 1, "2016-02-28": 6, "2016-03-11": 91, "2016-03-10": 35, "2016-03-13": 8, "2016-03-12": 64, "2016-08-31": 5, "2016-12-16": 4, "2016-03-20": 15, "2016-11-08": 12, "2016-03-22": 6, "2016-03-24": 5, "2016-03-29": 1, "2016-11-07": 3, "2016-02-26": 21, "2016-02-27": 17, "2016-08-29": 2, "2016-08-28": 1, "2016-08-25": 1, "2016-08-27": 1, "2016-08-26": 1, "2016-11-06": 1, "2016-08-23": 2, "2016-08-22": 4, "2016-05-26": 2, "2016-05-20": 3, "2016-11-13": 5, "2016-09-05": 5, "2016-04-30": 4, "2016-09-01": 11, "2016-09-03": 3, "2016-07-08": 1, "2016-11-17": 8, "2016-03-30": 1, "2016-11-15": 1, "2016-08-10": 6, "2016-08-11": 6, "2016-08-12": 1, "2016-08-13": 3, "2016-08-15": 1, "2016-07-10": 6, "2016-08-18": 2, "2016-04-29": 1, "2016-09-10": 1, "2016-09-16": 1, "2016-09-14": 1, "2016-04-21": 4, "2016-04-20": 8, "2016-04-23": 3, "2016-04-22": 3, "2016-04-25": 6, "2016-04-24": 1, "2016-04-26": 2, "2016-07-16": 3, "2016-10-19": 3, "2016-11-26": 3, "2016-05-08": 1, "2016-05-09": 1, "2016-08-05": 3, "2016-07-06": 1, "2016-07-07": 9, "2016-07-05": 3, "2016-05-01": 2, "2016-05-02": 4, "2016-05-04": 1, "2016-05-05": 10, "2016-05-06": 1, "2016-05-07": 6, "2016-04-18": 4, "2016-04-19": 6, "2016-04-11": 7, "2016-04-12": 2, "2016-04-13": 7, "2016-06-16": 2, "2016-06-17": 4, "2016-06-10": 3, "2016-07-11": 5, "2016-07-02": 2, "2016-07-13": 2, "2016-07-12": 17, "2016-07-14": 5, "2016-05-18": 2, "2016-07-19": 5, "2016-05-16": 3, "2016-05-14": 1, "2016-05-13": 1, "2016-05-11": 3, "2016-05-10": 1, "2016-04-03": 5, "2016-04-07": 24, "2016-04-06": 1, "2016-04-05": 8, "2016-04-04": 7, "2016-09-06": 6, "2016-04-09": 30, "2016-04-08": 8, "2016-01-26": 13, "2016-01-27": 43, "2016-01-25": 1, "2016-01-28": 74, "2016-01-29": 30, "2016-06-03": 6, "2016-02-18": 8, "2016-02-19": 6, "2016-02-12": 2, "2016-02-13": 1, "2016-02-10": 34, "2016-02-11": 2, "2016-02-16": 14, "2016-02-17": 4, "2016-02-14": 45, "2016-02-15": 55, "2016-07-24": 3, "2016-07-25": 3, "2016-07-27": 4, "2016-07-21": 4, "2016-10-09": 1, "2016-08-09": 2, "2016-06-08": 1, "2016-01-31": 94, "2016-01-30": 136, "2016-09-28": 1, "2016-02-09": 7, "2016-02-08": 14, "2016-02-01": 40, "2016-02-03": 10, "2016-02-02": 68, "2016-02-05": 47, "2016-06-07": 2, "2016-02-07": 25, "2016-02-06": 9}}]

    # looks like {datetime.datetime(2016, 6, 3, 0, 0): 12, datetime.datetime(2016, 4, 4, 0, 0): 14

    merged_date_list = geoprocessing.merge_dates(response_list, tiles)

     # aggregate by
    resp_dict = geoprocessing.create_resp_dict(merged_date_list)

    return serializers.serialize_fire_analysis(resp_dict, agg_by)


if __name__ == '__main__':
    aoi ={"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"type":"Polygon","coordinates":[[[117.164337416055,-0.146001213786356],[117.155703106841,-0.057749439573639],[117.130133243555,0.027110960960791],[117.088610223703,0.105318959360494],[117.032729390131,0.173868987816331],[116.9646379261,0.230126442445014],[116.886952514797,0.271929022470392],[116.802658856842,0.297669979066676],[116.714996872182,0.306360018259741],[116.62733601195,0.297665417784521],[116.543045531146,0.271920848997643],[116.465364792161,0.230116400643847],[116.397278664419,0.173859331577133],[116.341402857481,0.105312081565839],[116.299883592981,0.027108993740147],[116.274315418049,-0.057744991082702],[116.265680230058,-0.145989746845834],[116.274309760144,-0.234235059943345],[116.299872885489,-0.319090657019565],[116.341388234208,-0.397296240890491],[116.397261631207,-0.465846611406709],[116.465347025389,-0.522107112718315],[116.543028657773,-0.563914980303813],[116.627321403215,-0.589662660364852],[116.714985480799,-0.598359835271131],[116.80265112075,-0.589671696300947],[116.886948340271,-0.56393193102085],[116.964636750894,-0.522129896874692],[117.032730315149,-0.465872485244865],[117.088612191345,-0.397322188160817],[117.130135233987,-0.319113812726435],[117.155704320927,-0.234253104759971],[117.164337416055,-0.146001213786356]]]}}]}

    # why this crazy structure? Oh lambda . . . sometimes I wonder
    event = {
             'body': json.dumps({'geojson': aoi}),
             'queryStringParameters': {'aggregate_by':'year', 'aggregate_values': 'True', 'tile_id': '10N_00W', 'fire_type': ['viirs']}
            }

    fire_analysis(event, None)
